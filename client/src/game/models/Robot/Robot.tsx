/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useMemo, useRef, useEffect, MutableRefObject } from "react";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import * as SkeletonUtils from "three/examples/jsm/utils/SkeletonUtils";
import * as THREE from "three";

// import Hat from "./Hat";
import { COLORS, Color } from "./constants";
import { useHandleAnimation } from "./useHandleAnimation";

const AnimationHandler = ({
  model,
  fwdRef,
  moving,
  jumping,
}: {
  model: THREE.Object3D | { animations: THREE.AnimationClip[] };
  fwdRef: MutableRefObject<THREE.Group>;
  moving: boolean;
  jumping: boolean;
}) => {
  const animationsOrModel = model ? model.animations : model;
  const { actions, mixer } = useAnimations(animationsOrModel, fwdRef);
  useHandleAnimation(actions, mixer, moving, jumping);
  return null;
};

const coloredMaterials = {} as Record<Color, THREE.Material>;

export function Robot({
  color,
  moving,
  jumping,
  // hat,
  ...props
}: {
  color: Color;
  moving: boolean;
  jumping: boolean;
}) {
  // const [threeColor, setThreeColor] = useState(null);
  // const [coloredMat, setColoredMat] = useState(null);
  // const [model, setModel] = useState(null);
  const { scene, animations } = useGLTF("/models/Robot/Robot_Yellow.glb");
  const copiedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(copiedScene);

  const group = useRef<THREE.Group>(null!);
  // const hatRef = useRef(null);

  useEffect(() => {
    if (!COLORS[color] || !materials || !materials.Main) return;
    if (coloredMaterials[color]) return;
    coloredMaterials[color] = materials.Main.clone();
    coloredMaterials[color].color = new THREE.Color(COLORS[color]);
  }, [color, materials]);

  // useEffect(() => new GLTFLoader().load(`/models/Robot/Robot_Yellow.glb`, setModel), []);

  useEffect(() => {
    if (!materials || !materials.Main || !coloredMaterials[color]) return;
    materials.Main.color = coloredMaterials[color];
  }, [color, materials]);

  useEffect(() => {
    if (!nodes || !nodes.Bone || !color || !coloredMaterials[color]) return;
    nodes.Bone.traverse(obj => {
      if (obj.material && obj.material.name === "Main") {
        // eslint-disable-next-line no-param-reassign
        obj.material = coloredMaterials[color];
      }
    });
  }, [color, nodes]);

  // useEffect(() => {
  //   if (!nodes || !nodes.Bone) return;
  //   if (!hat || !hatRef.current) return;
  //   nodes.Bone.traverse(obj => {
  //     if (obj.name === "Head") {
  //       obj.add(hatRef.current);
  //     }
  //   });
  // }, [nodes, hat]);

  const model = useMemo(() => ({ animations }), [animations]);
  return (
    <>
      <AnimationHandler
        model={model}
        fwdRef={group}
        moving={moving}
        jumping={jumping}
      />
      <group name="Robot" ref={group} {...props} dispose={null}>
        {/* <Hat type={hat} ref={hatRef} /> */}
        <group
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[100, 100, 100]}
          dispose={null}
        >
          {nodes.Bone && <primitive object={nodes.Bone} />}
        </group>
        <group
          position={[0, 2.37, -0.02]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[100, 100, 100]}
        >
          <skinnedMesh
            geometry={nodes.HandR_1.geometry}
            material={coloredMaterials[color] || nodes.HandR_1.material}
            skeleton={nodes.HandR_1.skeleton}
          >
            {/* <meshBasicMaterial color="yellow" /> */}
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.HandR_2.geometry}
            material={nodes.HandR_2.material}
            skeleton={nodes.HandR_2.skeleton}
          />
        </group>
        <group
          position={[0, 2.37, -0.02]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[100, 100, 100]}
        >
          <skinnedMesh
            geometry={nodes.HandL_1.geometry}
            material={coloredMaterials[color] || nodes.HandL_1.material}
            skeleton={nodes.HandL_1.skeleton}
          >
            {/* <meshBasicMaterial color="yellow" /> */}
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.HandL_2.geometry}
            material={nodes.HandL_2.material}
            skeleton={nodes.HandL_2.skeleton}
          />
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/models/Robot/Robot_Yellow.glb");
